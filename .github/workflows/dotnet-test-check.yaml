name: Build and test dotnet

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
    branches: [main]

permissions:
  contents: write
  packages: write
  pull-requests: write
  checks: write
  issues: write

env:
  DOTNET_VERSION: "9.0.*"
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  check-label:
    name: Check label
    runs-on: ubuntu-latest
    outputs:
      status: ${{steps.label-check.outputs.label_check}}
    steps:
      - name: check-conventional-commits-labels
        uses: docker://agilepathway/pull-request-label-checker:latest
        id: label-check
        with:
          none_of: release
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          allow_failure: true
  pre-checks:
    runs-on: ubuntu-latest
    outputs:
      hasChanged: ${{steps.changed-paths.outputs.changed}}
      paths: ${{steps.list-files.outputs.paths}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: marceloprado/has-changed-path@v1.0.1
        id: changed-paths
        with:
          paths: src/ tests/
      - name: List Files
        id: list-files
        uses: ab185508/file-type-finder@main
        with:
            path: "src/"
            type: "Dockerfile"

  build-test-dotnet:
    runs-on: ubuntu-latest
    name: Build, test and generate result
    needs: [pre-checks, check-label]
    if: ${{ needs.pre-checks.outputs.hasChanged == 'true' && needs.check-label.outputs.status == 'success'}}
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Install .NET Aspire workload
        run: dotnet workload install aspire

      # - name: Cache NuGet packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.nuget/packages
      #     key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
      #     restore-keys: |
      #       nuget-${{ runner.os }}-

      - name: Restore dependencies
        run: dotnet restore TeckShop.sln

      - name: Build
        run: dotnet build TeckShop.sln -c Release --no-restore

      - name: Test
        run: dotnet test TeckShop.sln -c Release --no-restore --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage" --blame

      - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
        with:
          reports: "**/*.cobertura.xml"
          targetdir: "${{ github.workspace }}"
          reporttypes: "Cobertura"
          verbosity: "Info"
          title: "Code Coverage"
          tag: "${{ github.run_number }}_${{ github.run_id }}"
          customSettings: ""
          toolpath: "reportgeneratortool"

      - name: Upload Combined Coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ${{ github.workspace }}/Cobertura.xml
          retention-days: 5

      - name: Publish Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "Cobertura.xml"
          badge: true
          fail_below_min: false # just informative for now
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: "10 30"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload Test Result Files
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}/**/TestResults/**/*
          retention-days: 5

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.17.0
        if: always()
        with:
          trx_files: "${{ github.workspace }}/**/*.trx"

      - name: Check formatting
        run: dotnet format --verify-no-changes
        continue-on-error: true

  build-test-docker:
    runs-on: ${{ matrix.builder.runner-image }}
    name: Build and test docker image
    needs: 
      - build-test-dotnet
      - pre-checks
      - check-label
    if: ${{ needs.pre-checks.outputs.hasChanged == 'true' && needs.check-label.outputs.status == 'success'}}
    strategy:
      matrix:
        paths: ${{ fromJson( needs.pre-checks.outputs.paths)}}
        builder:
          - runner-image: ubuntu-24.04
            platform: linux/amd64
          - runner-image: ubuntu-24.04-arm
            platform: linux/arm64
    steps:
      - name: Prepare
        run: |
          echo "REPO_LOWER=$(echo '${{ env.REPOSITORY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "PLATFORM_PAIR=$(echo '${{ matrix.builder.platform }}' | sed 's/\//-/')" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: Extract service name from Dockerfile path
        run: |
          # Extract service name from Dockerfile path (e.g., src/services/catalog/Catalog.Api/Dockerfile)
          DOCKERFILE_PATH="${{ matrix.paths }}"
          # Remove leading directories and trailing '/Dockerfile', replace / and . with -
          SERVICE_NAME=$(basename "$(dirname "$DOCKERFILE_PATH")" | tr '[:upper:]' '[:lower:]' | sed 's/\./-/g')
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.REPO_LOWER }}
          tags: ${{ github.sha }}
      - name: Log in to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      - name: Build and push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.paths }}
          platforms: ${{ matrix.builder.platform }}
          push: true
          tags: ghcr.io/${{ env.REPO_LOWER }}/${{ env.SERVICE_NAME }}:${{ github.sha }}-${{ env.PLATFORM_PAIR }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/digests-$SERVICE_NAME-$PLATFORM_PAIR-${digest#sha256:}"
        env:
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          PLATFORM_PAIR: ${{ env.PLATFORM_PAIR }}
      - name: List digests before upload
        run: |
          echo "Listing contents of ${{ runner.temp }}/digests before upload:"
          ls -l ${{ runner.temp }}/digests || echo "No digests directory"
      - name: Sanitize Dockerfile path for artifact name
        id: sanitize_path
        run: |
          SANITIZED_PATH=$(echo "${{ matrix.paths }}" | sed 's#[/\\:*?"<>|]#-#g')
          echo "sanitized_path=$SANITIZED_PATH" >> $GITHUB_OUTPUT
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.SERVICE_NAME }}-${{ env.PLATFORM_PAIR }}-${{ steps.sanitize_path.outputs.sanitized_path }}
          path: ${{ runner.temp }}/digests/*

  merge:
    runs-on: ubuntu-latest
    needs: build-test-docker
    steps:
      - name: Prepare lowercase repository
        run: echo "REPO_LOWER=$(echo '${{ env.REPOSITORY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true
      - name: Log in to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Find all services
        id: find_services
        run: |
          mkdir -p ${{ runner.temp }}/digests
          if ! compgen -G "${{ runner.temp }}/digests/digests-*" > /dev/null; then
            echo "No digest files found in ${{ runner.temp }}/digests. Exiting."
            exit 1
          fi
          SERVICES=$(find ${{ runner.temp }}/digests -type f -printf '%f\n' | rev | cut -d'-' -f2- | rev | sed 's/^digests-//g' | sort | uniq)
          SERVICES_ENV=$(echo "$SERVICES" | paste -sd ' ' -)
          # Always quote the value for GITHUB_ENV
          echo "SERVICES=\"$SERVICES_ENV\"" >> $GITHUB_ENV
          SERVICES_CSV=$(echo "$SERVICES" | paste -sd ',' -)
          echo "services=$SERVICES_CSV" >> $GITHUB_OUTPUT
      - name: Create, scan, and delete manifests per service
        run: |
          set -e
          ORG=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          for SERVICE in $SERVICES; do
            DIGEST_FILES=$(find ${{ runner.temp }}/digests -type f -name "digests-$SERVICE-*")
            if [ -n "$DIGEST_FILES" ]; then
              echo "\n--- Processing $SERVICE ---"
              # Correctly extract service name and platform pair for tag reference
              docker buildx imagetools create -t ghcr.io/$REPO_LOWER/$SERVICE:${{ github.sha }} \
                $(for f in $DIGEST_FILES; do \
                  FBASE=$(basename $f); \
                  FBASE=${FBASE#digests-}; \
                  # Service name is everything up to the last two dashes (platform and digest)
                  SERVICE_PART=$(echo $FBASE | sed -E 's/-[^-]+-[^-]+$//;s/-[^-]+$//'); \
                  PLATFORM_PAIR=$(echo $FBASE | sed -E 's/.*-([^-]+-[^-]+)-[^-]+$/\1/'); \
                  echo "ghcr.io/$REPO_LOWER/$SERVICE_PART:${{ github.sha }}-$PLATFORM_PAIR"; \
                done)
              # Inspect
              docker buildx imagetools inspect ghcr.io/$REPO_LOWER/$SERVICE:${{ github.sha }}
              # Scan
              docker run --rm aquasec/trivy:0.49.1 image --exit-code 0 --no-progress ghcr.io/$REPO_LOWER/$SERVICE:${{ github.sha }} || true
              # Delete (use org endpoint)
              IMAGE_ID=$(gh api /orgs/$ORG/packages/container/$REPO_LOWER/$SERVICE/versions --jq ".[] | select(.metadata.container.tags[]? == \"${{ github.sha }}\") | .id")
              if [ -n "$IMAGE_ID" ]; then
                gh api -X DELETE "/orgs/$ORG/packages/container/$REPO_LOWER/$SERVICE/versions/$IMAGE_ID"
              fi
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}